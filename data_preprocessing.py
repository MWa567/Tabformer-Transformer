# -*- coding: utf-8 -*-
"""Data Preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/100bZE7e1YGg2mgIE9FHqAHJEjGAifX8c
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
from importlib import reload
from datetime import datetime
from geopy.distance import great_circle
from sklearn.preprocessing import OneHotEncoder
import statistics

def data_preprocessing(train_data, test_data):
  train_data = train_data.sort_values(by = ["cc_num", "trans_date_trans_time"])
  test_data = test_data.sort_values(by = ["cc_num", "trans_date_trans_time"])

  # Drop unnamed, merchant zipcode, cc_num, merchant, first, last, street, city, state, zip, job, trans_num, unix_time
  for col in ["Unnamed: 0", "unix_time", "merchant", "first", "last", "street", "city", "zip", "job", "trans_num", "merch_zipcode"]:
      train_data = train_data.drop([col], axis=1)
      test_data = test_data.drop([col], axis=1)

  # Parse transdatetranstime column into six distinct features
  date_format = "%Y-%m-%d %H:%M:%S"
  train_data["Year"] = train_data["trans_date_trans_time"].str[0:4]
  train_data["Month"] = train_data["trans_date_trans_time"].str[5:7]
  train_data["Day"] = train_data["trans_date_trans_time"].str[8:10]
  train_data["Hour"] = train_data["trans_date_trans_time"].str[11:13]
  train_data["Minute"] = train_data["trans_date_trans_time"].str[14:16]
  train_data["Second"] = train_data["trans_date_trans_time"].str[17:19]

  test_data["Year"] = test_data["trans_date_trans_time"].str[0:4]
  test_data["Month"] = test_data["trans_date_trans_time"].str[5:7]
  test_data["Hour"] = test_data["trans_date_trans_time"].str[11:13]
  test_data["Day"] = test_data["trans_date_trans_time"].str[8:10]
  test_data["Minute"] = test_data["trans_date_trans_time"].str[14:16]
  test_data["Second"] = test_data["trans_date_trans_time"].str[17:19]

  for col in ["Year", "Month", "Day", "Hour", "Minute", "Second"]:
    train_data[col] = pd.to_numeric(train_data[col], downcast='integer', errors='coerce')
    test_data[col] = pd.to_numeric(test_data[col], downcast='integer', errors='coerce')

  # calculate day of week of the transaction

  def calculate_day_of_week(row):
    date_format = "%Y-%m-%d %H:%M:%S"
    date_of_interest = datetime.strptime(row["trans_date_trans_time"], date_format)
    return date_of_interest.weekday()

  train_data['dayOfWeek'] = train_data.apply(calculate_day_of_week, axis=1)
  test_data['dayOfWeek'] = test_data.apply(calculate_day_of_week, axis=1)

  train_data = train_data.drop(["trans_date_trans_time"], axis=1)
  test_data = test_data.drop(["trans_date_trans_time"], axis=1)

  # calculate age from date of birth
  def calculate_age(row):
    dob = row['dob']
    year_of_interest = row['Year']
    month_of_interest = row['Month']
    day_of_interest = row['Day']

    dob_year = int(dob[0:4])
    dob_month = int(dob[5:7])
    dob_day = int(dob[8:10])

    if dob_month > month_of_interest or (dob_month == month_of_interest and dob_day >= day_of_interest):
        age = year_of_interest - dob_year
    else:
        age = year_of_interest - dob_year - 1

    return age

  '''
  # Apply the function to the df
  train_data['age'] = train_data.apply(calculate_age, axis=1)
  test_data['age'] = test_data.apply(calculate_age, axis=1)
  '''

  train_data = train_data.drop(['dob'], axis=1)
  test_data = test_data.drop(['dob'], axis=1)

  # convert categories and gender to numerical data
  def get_categories(col):
    category_dict = {}
    output = []
    for val in col:
      if val in category_dict:
        category = category_dict[val]
      else:
        category = len(category_dict)
        category_dict[val] = category
      output.append(category)
    return output

  def get_gender(col):
    output = []
    for val in col:
      if val == "M":
        gender = 0.0
      else:
        gender = 1.0
      output.append(gender)
    return output

  train_data['category'] = get_categories(train_data['category'].tolist())
  train_data['gender'] = get_gender(train_data['gender'].tolist())

  test_data['category'] = get_categories(test_data['category'].tolist())
  test_data['gender'] = get_gender(test_data['gender'].tolist())

  # get distance from merchant to user
  def calculate_great_circle(row):
    coordinates_from = (row['lat'], row['long'])
    coordinates_to = (row['merch_lat'], row['merch_long'])
    return great_circle(coordinates_from, coordinates_to).km

  train_data['LatLong_Dist'] = train_data.apply(calculate_great_circle, axis=1)
  test_data['LatLong_Dist'] = test_data.apply(calculate_great_circle, axis=1)

  def sum_hour_amts(df):
    hours = {}
    for index, row in df.iterrows():
      hour = row['Hour']
      amt = row['amt']
      if hour in hours:
        hours[hour] += [amt]
      else:
        hours[hour] = [amt]
    return hours

  train_hour_amts = sum_hour_amts(train_data)
  for hour in train_hour_amts:
    train_hour_amts[hour] = (statistics.mean(train_hour_amts[hour]), statistics.stdev(train_hour_amts[hour]))

  test_hour_amts = sum_hour_amts(test_data)
  for hour in test_hour_amts:
    test_hour_amts[hour] = (statistics.mean(test_hour_amts[hour]), statistics.stdev(test_hour_amts[hour]))

  def get_hour_amt(row, hour_amts):
    category = row['Hour']
    return (row['amt'] - hour_amts[hour][0]) / hour_amts[hour][1]

  train_data['hour_amt'] = train_data.apply(lambda row: get_hour_amt(row, train_hour_amts), axis=1)
  test_data['hour_amt'] = test_data.apply(lambda row: get_hour_amt(row, test_hour_amts), axis=1)

  def sum_category_amts(df):
    categories = {}
    for index, row in df.iterrows():
      category = row['category']
      amt = row['amt']
      if category in categories:
        categories[category] += [amt]
      else:
        categories[category] = [amt]
    return categories

  train_category_amts = sum_category_amts(train_data)
  for category in train_category_amts:
    train_category_amts[category] = (statistics.mean(train_category_amts[category]), statistics.stdev(train_category_amts[category]))

  test_category_amts = sum_category_amts(test_data)
  for category in test_category_amts:
    test_category_amts[category] = (statistics.mean(test_category_amts[category]), statistics.stdev(test_category_amts[category]))

  def get_category_amt(row, category_amts):
    category = row['category']
    return (row['amt'] - category_amts[category][0]) / category_amts[category][1]

  train_data['category_amt'] = train_data.apply(lambda row: get_category_amt(row, train_category_amts), axis=1)
  test_data['category_amt'] = test_data.apply(lambda row: get_category_amt(row, test_category_amts), axis=1)

  return train_data, test_data